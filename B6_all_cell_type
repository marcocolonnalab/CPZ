library(Seurat)
library(dplyr)
library(Matrix)
library(readr)

## GATHERING DATA TOGETHER
    
dataFolder <- "/storage1/fs1/martyomov/Active/NextGenImmunology/BSL3/AS025/align3"

dataFolders <- list()
dataFolders[[1]] <- paste(dataFolder, "/A1/outs/filtered_feature_bc_matrix", sep="")
dataFolders[[2]] <- paste(dataFolder, "/A2/outs/filtered_feature_bc_matrix", sep="")
dataFolders[[3]] <- paste(dataFolder, "/A3/outs/filtered_feature_bc_matrix", sep="")
dataFolders[[4]] <- paste(dataFolder, "/A4/outs/filtered_feature_bc_matrix", sep="")
dataFolders[[5]] <- paste(dataFolder, "/A5/outs/filtered_feature_bc_matrix", sep="")
dataFolders[[6]] <- paste(dataFolder, "/B7/outs/filtered_feature_bc_matrix", sep="")
dataFolders[[7]] <- paste(dataFolder, "/B8/outs/filtered_feature_bc_matrix", sep="")
dataFolders[[8]] <- paste(dataFolder, "/B9/outs/filtered_feature_bc_matrix", sep="")

fdata <- list()
fdata[[1]] <- Read10X(dataFolders[[1]])
fdata[[2]] <- Read10X(dataFolders[[2]])
fdata[[3]] <- Read10X(dataFolders[[3]])
fdata[[4]] <- Read10X(dataFolders[[4]])
fdata[[5]] <- Read10X(dataFolders[[5]])
fdata[[6]] <- Read10X(dataFolders[[6]])
fdata[[7]] <- Read10X(dataFolders[[7]])
fdata[[8]] <- Read10X(dataFolders[[8]])

whole <- list()
whole[[1]] <- CreateSeuratObject(counts=fdata[[1]], project = "A1")
whole[[2]] <- CreateSeuratObject(counts=fdata[[2]], project = "A2")
whole[[3]] <- CreateSeuratObject(counts=fdata[[3]], project = "A3")
whole[[4]] <- CreateSeuratObject(counts=fdata[[4]], project = "A4")
whole[[5]] <- CreateSeuratObject(counts=fdata[[5]], project = "A5")
whole[[6]] <- CreateSeuratObject(counts=fdata[[6]], project = "B7")
whole[[7]] <- CreateSeuratObject(counts=fdata[[7]], project = "B8")
whole[[8]] <- CreateSeuratObject(counts=fdata[[8]], project = "B9")

#merge all samples
whole <- merge(x=whole[[1]], y=list(whole[[2]], whole[[3]], whole[[4]], whole[[5]], whole[[6]], whole[[7]], whole[[8]]), add.cell.ids = c("A1" , "A2", "A3", "A4", "A5", "B7", "B8", "B9" ))

## Number of cells before
cells.before <- length(colnames(x= whole))

cells_plot <- read_tsv("/storage1/fs1/martyomov/Active/NextGenImmunology/BSL3/AS025/analysis3/filter/dataReCluster.tsv")
cells_subset <- filter(cells_plot, !(Clustering0.9 %in% c(21, 30)))$X1
whole <- subset(x = whole, cells = cells_subset) 


## NORMALIZATION
mito.genes <- c(grep("^MT-", rownames(x = whole), value = T),
                grep("^mt-", rownames(x = whole), value = T))
percent.mito <- Matrix::colSums(x = GetAssayData(object = whole, slot = 'counts')[mito.genes, ]) / Matrix::colSums(x = GetAssayData(object = whole, slot = 'counts'))
whole[['percent.mito']] <- percent.mito

whole <- subset(x = whole, subset = percent.mito <= 0.05)
whole <- NormalizeData(object = whole, normalization.method = "LogNormalize", scale.factor = 10000)
whole <- FindVariableFeatures(object = whole, selection.method = 'mean.var.plot', mean.cutoff = c(0.0125, 3), dispersion.cutoff = c(0.5, Inf))
whole <- ScaleData(object = whole, features = VariableFeatures(object = whole), vars.to.regress = c("nCount_RNA", "percent.mito"))
gc()

## PCA
whole <- RunPCA(object = whole,
                features =  VariableFeatures(object = whole),
                verbose=FALSE)


## TSNE
whole <- RunTSNE(object = whole, dims = 1:20, check_duplicates = FALSE)
whole <- RunUMAP(object = whole, dims = 1:20)

## CLUSTERING
whole <- FindNeighbors(object = whole, dims = 1:20)
whole <- FindClusters(object = whole, resolution = 0.3)

DimPlot(object = whole, reduction="tsne")

## SAVING DATA FOR EXPLORER
expData <- GetAssayData(object = whole, slot = 'data')
save(expData, file="expData.Rda")

dataForPlot <- as.data.frame(whole@reductions$tsne@cell.embeddings)
dataForPlot$Sample <- whole@meta.data$orig.ident
dataForPlot$Cluster <-  Idents(object = whole)
dataForPlot$nUmi <- whole@meta.data$nCount_RNA
dataForPlot$nGene <- whole@meta.data$nFeature_RNA
dataForPlot$nUmiLog2 <- log2(whole@meta.data$nCount_RNA)
dataForPlot$nGeneLog2 <- log2(whole@meta.data$nFeature_RNA)

write.table(dataForPlot, "data_for_plot.tsv", sep="\t", quote=F)

## FINDING ANS SAVING MARKERS
whole.markers <- FindAllMarkers(object = whole,
                                only.pos = TRUE,
                                min.pct = 0.10,
                                logfc.threshold = 0.10)
write.table(whole.markers, "markers.tsv", sep="\t", quote=F, row.names=F)

## SAVING
save(whole, file = "whole_object.Robj")

## Number of cells after
cells.after <- length(colnames(x = whole))
print(paste0("cells.before:",cells.before))
print(paste0("cells.after:",cells.after))
print(paste0("cell.diff:", cells.before-cells.after))

